#!/bin/bash
#
#  Copyright (c) 2017, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
# Test thread commissioning along with openthread and wpantund.
#
# Usage:
#   ./meshcop         # test with latest openthread and wpantund.
#   NO_CLEAN=1 ./meshcop # test with existing binaries in ${TEST_BASE}.
set -e

# Get our starting directory and remember it
readonly ORIGIN_PWD="$(pwd)"
readonly SCRIPT_DIR="$(cd "$(dirname $0)" && pwd)"

#---------------------------------------
# Configurations
#---------------------------------------
readonly OT_NCP="${OT_NCP:-ot-ncp-ftd}"
readonly OT_CLI="${OT_CLI:-ot-cli-ftd}"
readonly ABS_TOP_BUILDDIR="$(cd ${top_builddir:-${SCRIPT_DIR}/../../} && pwd)"
readonly ABS_TOP_SRCDIR="$(cd ${top_srcdir:-${SCRIPT_DIR}/../../} && pwd)"
readonly NO_CLEAN="${NO_CLEAN:-0}"
readonly IGNORE_INSTALLED="${IGNORE_INSTALLED:-0}"

#----------------------------------------
# Test constants
#----------------------------------------
readonly TEST_BASE=/tmp/test-otbr

readonly WPANTUND=wpantund
readonly WPANCTL=wpanctl
readonly OTBR_AGENT=otbr-agent
readonly OTBR_COMMISSIONER=otbr-commissioner

readonly STAGE_DIR="${TEST_BASE}/stage"
readonly BUILD_DIR="${TEST_BASE}/build"
readonly WPANCTL_PATH="${STAGE_DIR}/usr/bin/${WPANCTL}"
readonly WPANTUND_PATH="${STAGE_DIR}/usr/sbin/${WPANTUND}"
readonly OT_NCP_PATH="${STAGE_DIR}/usr/bin/${OT_NCP}"
readonly OT_CLI_PATH="${STAGE_DIR}/usr/bin/${OT_CLI}"
readonly OTBR_COMMISSIONER_PATH="${ABS_TOP_BUILDDIR}/src/commissioner/${OTBR_COMMISSIONER}"
readonly OTBR_AGENT_PATH="${ABS_TOP_BUILDDIR}/src/agent/${OTBR_AGENT}"
readonly OTBR_DBUS_CONF="${ABS_TOP_SRCDIR}/src/agent/otbr-agent.conf"

# The node ids
readonly LEADER_NODE_ID=1
readonly JOINER_NODE_ID=2

#
# NOTE Joiner pass phrase:
#   Must be at least 6 bytes long
#   And this example has: J ZERO ONE N E R
#   We cannot use letter O and I because Q O I Z are not allowed per spec
readonly OT_JOINER_PASSPHRASE=J01NER

# 18b430 is the nest EUI prefix.
readonly OT_JOINER_EUI64="18b430000000000${JOINER_NODE_ID}"

# The border agent, and ncp needs a pass phrase.
readonly OT_AGENT_PASSPHRASE=MYPASSPHRASE

# The network needs a name.
readonly OT_NETWORK_NAME=MyTestNetwork

# The agent is on the local host.
readonly OT_AGENT_IPADDR='127.0.0.1'
readonly OT_AGENT_IPPORT=49191

# The TUN device for wpantund.
readonly TUN_NAME=wpan9

echo "ORIGIN_PWD: ${ORIGIN_PWD}"
echo "TEST_BASE: ${TEST_BASE}"
echo "ABS_TOP_SRCDIR=${ABS_TOP_SRCDIR}"
echo "ABS_TOP_BUILDDIR=${ABS_TOP_BUILDDIR}"

#----------------------------------------
# Helper functions
#----------------------------------------

die()
{
  exit_message="$@"
  echo " *** ERROR: " "$@"
  exit 1
}

exists_or_die()
{
  [[ -f "$1" ]] || die "Missing file: $1"
}

executable_or_die()
{
  [[ -x "$1" ]] || die "Missing executable: $1"
}

random_channel()
{
  expr 11 + "${RANDOM}" % 16
}

random_panid()
{
  printf "0x%04x" "${RANDOM}"
}

random_xpanid()
{
  printf "%04x%04x%04x%04x" "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
}

random_masterkey()
{
  printf "%04x%04x%04x%04x%04x%04x%04x%04x" "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
}

write_syslog()
{
  logger -p syslog.alert "OPENTHREAD_TEST: $@"
}

output_logs()
{
  write_syslog 'All apps should be dead now'

  # part 1
  # ------
  #
  # On travis (the CI server), we can't see what went into the
  # syslog.  So this is here so we can see the output.
  #
  # part 2
  # ------
  #
  # If we run locally, it is sometimes helpful for our victim (you
  # the developer) to have logs split upto various files to help
  # that victim, we'll GREP the log files according.
  #
  # Wait 5 seconds for the "logs to flush"
  sleep 5

  cd "${ORIGIN_PWD}"
  echo 'START_LOG: SYSLOG ==================='
  cat /var/log/syslog | tee complete-syslog.log
  echo 'START_LOG: BR-AGENT ================='
  cat /var/log/syslog | grep "${OTBR_AGENT}" | tee otbr-agent.log
  echo 'START_LOG: OTBR-COMISSIONER ========='
  cat /var/log/syslog | grep "${OTBR_COMMISSIONER}" | tee otbr-commissioner.log
  echo 'START_LOG: OT-NCP ==================='
  cat /var/log/syslog | grep "${OT_NCP}" | tee "${OT_NCP}.log"
  echo 'START_LOG: OT-CLI ==================='
  cat /var/log/syslog | grep "${OT_CLI}" | tee "${OT_CLI}.log"
  echo 'START_LOG: WPANTUND ================='
  cat /var/log/syslog | grep "${WPANTUND}" | tee wpantund.log
  echo '====================================='
  echo 'Hint, for each log Search backwards for: "START_LOG: <NAME>"'
  echo '====================================='
}

build_dependencies()
{
  # Clean up old stuff
  if [[ "${NO_CLEAN}" != 1 ]]; then
    [[ ! -d "${STAGE_DIR}" ]] || rm -rf "${STAGE_DIR}"
    [[ ! -d "${BUILD_DIR}" ]] || rm -rf "${BUILD_DIR}"
  fi

  [[ -d "${STAGE_DIR}" ]] || mkdir -p "${STAGE_DIR}"
  [[ -d "${BUILD_DIR}" ]] || mkdir -p "${BUILD_DIR}"

  # These are broken-out so that during debug you can comment out parts
  # and re-run this script multiple times script and not have your
  # test code get erased ...
  if [[ "${IGNORE_INSTALLED}" = 0 ]] && which "${WPANTUND}" && which "${WPANCTL}"; then
    wpanctl="${WPANCTL}"
    wpantund="${WPANTUND}"
  else
    checkout_wpantund
    configure_wpantund
    compile_wpantund
    wpanctl="${WPANCTL_PATH}"
    wpantund="${WPANTUND_PATH}"
  fi

  # As above, these steps are broken up
  if [[ "${IGNORE_INSTALLED}" = 0 ]] && which "${OT_NCP}" && which "${OT_CLI}"; then
    ot_ncp="${OT_NCP}"
    ot_cli="${OT_CLI}"
  else
    checkout_openthread
    configure_openthread
    compile_openthread
    ot_ncp="${OT_NCP_PATH}"
    ot_cli="${OT_CLI_PATH}"
  fi

  write_syslog "TEST: BUILD COMPLETE"
}

test_setup()
{
  # message for general failures
  exit_message="JOINER FAILED"

  executable_or_die "${OTBR_COMMISSIONER_PATH}"
  executable_or_die "${OTBR_AGENT_PATH}"

  # Remove flashes
  sudo rm -vrf "${TEST_BASE}/tmp"

  build_dependencies

  # We will be creating a lot of log information
  # Rotate logs so we have a clean and empty set of logs uncluttered with other stuff
  if [[ -f /etc/logrotate.conf ]]; then
    sudo logrotate -f /etc/logrotate.conf
  fi

  # From now on - all exits are TRAPPED
  # When they occur, we call the function: output_logs'.
  trap test_teardown EXIT
}

test_teardown()
{
  # Capture the exit code so we can return it below
  readonly EXITCODE=$?
  write_syslog "EXIT ${EXITCODE} - output logs"

  sudo killall "${WPANTUND}" || true
  sudo killall "${OTBR_AGENT}" || true
  sudo killall "${OTBR_COMMISSIONER}" || true
  sudo killall "${OT_NCP}" || true
  sudo killall "${OT_CLI}" || true
  wait

  if [[ "${NO_CLEAN}" != 1 ]]; then
    echo 'clearing all'
    sudo rm /etc/dbus-1/system.d/wpantund.conf || true
    sudo rm /etc/dbus-1/system.d/otbr-agent.conf || true
    sudo rm -rf "${STAGE_DIR}" || true
    sudo rm -rf "${BUILD_DIR}" || true

    output_logs
  fi

  echo "EXIT ${EXIT_CODE}: MESSAGE: ${exit_message}"
  exit ${EXIT_CODE}
}

checkout_wpantund()
{
  cd "${BUILD_DIR}"

  [[ -d 'wpantund' ]] || git clone --depth 1 https://github.com/openthread/wpantund.git
}

configure_wpantund()
{
  cd "${BUILD_DIR}/wpantund"

  if [[ "${NO_CLEAN}" = 1 && -f Makefile ]]; then
    echo 'Skip configure openthread'
    return 0
  fi

  set -x
  ./bootstrap.sh
  ./configure \
    --disable-ncp-dummy \
    --exec-prefix=/usr \
    --enable-static-link-ncp-plugin=spinel  \
    --prefix= \
    --without-connman
  set +x
}

compile_wpantund()
{
  make -C "${BUILD_DIR}/wpantund" all
  make -C "${BUILD_DIR}/wpantund" install DESTDIR="${STAGE_DIR}"

  executable_or_die "${WPANTUND_PATH}"
  executable_or_die "${WPANCTL_PATH}"

  sudo cp "${STAGE_DIR}/etc/dbus-1/system.d/wpantund.conf" /etc/dbus-1/system.d

  if which service; then
    # tell dbus to reload, we have changed/added a configuration file
    sudo service dbus reload
  else
    write_syslog "WARNING: Do not know how to tell dbus to re-load config files"
  fi
}

checkout_openthread()
{
  cd "${BUILD_DIR}"

  [[ -d 'openthread' ]] || git clone --depth 1 https://github.com/openthread/openthread.git
}

compile_openthread()
{
  make -C "${BUILD_DIR}/openthread" -j 20 all
  make -C "${BUILD_DIR}/openthread" -j 20 install DESTDIR="${STAGE_DIR}"

  executable_or_die "${OT_NCP_PATH}"
  executable_or_die "${OT_CLI_PATH}"
}

configure_openthread()
{
  set -x

  cd "${BUILD_DIR}/openthread"

  if [[ "${NO_CLEAN}" = 1 && -f Makefile ]]; then
    echo 'Skip configure openthread'
    return 0
  fi

  local log_flags
  # It is helpful to have logs enabled during testing ..
  log_flags=''
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_LEVEL=OT_LOG_LEVEL_DEBG"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_API=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_ARP=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_CLI=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_COAP=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_ICMP=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_IP6=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_MAC=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_MEM=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_MLE=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_NETDATA=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_NETDIAG=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_PKT_DUMP=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_PLATFORM=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_PREPEND_LEVEL=1"
  log_flags="${log_flags} -DOPENTHREAD_CONFIG_LOG_PREPEND_REGION=1"

  ./bootstrap

  CFLAGS="${CFLAGS} -g -O0 ${log_flags}" CXXFLAGS="${CFLAGS} -g -O0 ${log_flags}" \
    ./configure \
    --prefix=/usr \
    --disable-docs \
    --enable-border-agent \
    --enable-border-router \
    --enable-cli \
    --enable-debug \
    --enable-ftd \
    --enable-joiner \
    --enable-mtd \
    --enable-ncp \
    --enable-udp-proxy \
    --with-examples=posix \
    --with-ncp-bus=uart \
    --with-platform-info=POSIX

  set +x
}

leader_start()
{
  write_syslog "MESHCOP TEST BEGIN - rotated logs"

  readonly OT_PANID="$(random_panid)"
  readonly OT_XPANID="$(random_xpanid)"
  readonly OT_MASTER_KEY="$(random_masterkey)"
  readonly OT_CHANNEL="$(random_channel)"

  # Using the commissioner app - Compute the PSKc from the above settings.
  set -x
  readonly OT_PSKC="$(${OTBR_COMMISSIONER_PATH} --disable-syslog \
    --network-name "${OT_NETWORK_NAME}" --xpanid "${OT_XPANID}" \
    --agent-passphrase "${OT_AGENT_PASSPHRASE}" \
    --compute-pskc | cut -d ' ' -f2)"
  set +x

  # These might not exit cleanly
  write_syslog "LEADER: killing the old"

  # Kill old wpantund
  sudo killall "${WPANTUND}" || true
  sudo killall "${OT_NCP}" || true

  write_syslog "LEADER: starting"

  # Do this within a private script as root.
  set -x
  (cd "${TEST_BASE}" && sudo "${wpantund}" -d 5 -I "${TUN_NAME}" \
    -s "system:${ot_ncp} ${LEADER_NODE_ID}" &)
  set +x

  echo 'Waiting for wpantund to fully start'
  sleep 10

  set -x
  sudo "${wpanctl}" -I "${TUN_NAME}" set Daemon:AutoAssociateAfterReset false
  sudo "${wpanctl}" -I "${TUN_NAME}" leave
  sudo "${wpanctl}" -I "${TUN_NAME}" set Network:PSKc --data "${OT_PSKC}"
  sudo "${wpanctl}" -I "${TUN_NAME}" set Network:Key --data "${OT_MASTER_KEY}"
  sudo "${wpanctl}" -I "${TUN_NAME}" set Network:PANID "${OT_PANID}"
  sudo "${wpanctl}" -I "${TUN_NAME}" set Network:XPANID "${OT_XPANID}"
  sudo "${wpanctl}" -I "${TUN_NAME}" form "${OT_NETWORK_NAME}" -c "${OT_CHANNEL}"
  set +x

  # These should be running now and should not have crashed!
  pidof "${WPANTUND}" || die "LEADER: Failed to start wpantund"
  pidof "${OT_NCP}" || die "LEADER: Failed to start ${OT_NCP}"

  write_syslog "LEADER: start complete"
}


ba_start()
{
  exists_or_die "${OTBR_DBUS_CONF}"
  sudo cp "${OTBR_DBUS_CONF}" /etc/dbus-1/system.d

  write_syslog "AGENT: kill old"
  sudo killall "${OTBR_AGENT}" || true
  write_syslog "AGENT: starting"

  # check version
  (cd "${ORIGIN_PWD}" && sudo "${OTBR_AGENT_PATH}" -v)
  # check invalid arguments
  (cd "${ORIGIN_PWD}" && ! sudo "${OTBR_AGENT_PATH}" -x)
  # we launch this in the background
  (cd "${ORIGIN_PWD}" && sudo "${OTBR_AGENT_PATH}" -I "${TUN_NAME}" -d 6&)
  # wait for it to complete
  sleep 10

  pidof ${OTBR_AGENT} || die "AGENT: failed to start"
  write_syslog "AGENT: start complete"
}

commissioner_start()
{
  local args
  write_syslog "COMMISSIONER: kill old"
  sudo killall "${OTBR_COMMISSIONER}" || true

  rm -f "${OT_COMMISSIONER_LOG_FILE}"
  # Clear the args variable.
  args=

  # And network parameters
  args="${args} --network-name      ${OT_NETWORK_NAME}"
  args="${args} --xpanid            ${OT_XPANID}"
  args="${args} --agent-passphrase  ${OT_AGENT_PASSPHRASE}"
  # About our joiner.
  args="${args} --joiner-eui64      ${OT_JOINER_EUI64}"
  args="${args} --joiner-passphrase ${OT_JOINER_PASSPHRASE}"
  # Where is the agent?
  args="${args} --agent-addr        ${OT_AGENT_IPADDR}"
  args="${args} --agent-port        ${OT_AGENT_IPPORT}"
  #
  # Debug level, full blast (this is test a test on a
  # a remote machine, being able to *SEE* the result helpful
  args="${args} --debug-level 7"

  # All of this should be done in 200 seconds
  # See note below about COMM_KA
  args="${args} --comm-envelope-timeout 200"

  # Tell the tool to "commission"
  args="${args} --commission-device"

  # Launch the commissioner in the background
  set -x
  (cd "${ORIGIN_PWD}" && "${OTBR_COMMISSIONER_PATH}" ${args} &)
  set +x

  # Wait for it to launch and get started.
  sleep 5

  # Is it still running or did it die?
  pidof "${OTBR_COMMISSIONER}" || die "COMMISSIONER: failed to start"
  #
  # It takes about 8 to 10 seconds for the DTLS handshake to complete.
  echo 'Waiting for commissioner'

  # The ENVELOPE (total time) timeout is 200 seconds.
  #
  # If no COMM_KA occurs:
  #    The Commissioner process timeout is 50 seconds.
  # ELSE
  #    (COMM_KA does occur)
  #    The commissioner will not timeout
  #
  # By waiting 100 seconds we test that the timeout would have fired
  # And that the COMM_KA process is actually working.
  #
  sleep 100
  write_syslog "TEST: Commissioner COM_KA should be seen by now"
  write_syslog "TEST: Commissioner ready for joiner"
}

joiner_start()
{
  write_syslog 'JOINER START'
  expect -f-  <<EOF || die 'JOINER FAILED'
send "cd ${TEST_BASE}\r\n"
spawn ${ot_cli} ${JOINER_NODE_ID}
send "ifconfig up\r\n"
expect "Done"
send "joiner start ${OT_JOINER_PASSPHRASE}\r\n"
set timeout 20
expect {
  "Join success" {
    send_user "succeeded to find join success"
    send "exit\r\n"
  }
  timeout {
    send_user "Failed to find join success"
    exit 1
  }
}
EOF
  exit_message="JOINER SUCCESS COMPLETE"
}

main()
{
  test_setup
  leader_start
  ba_start
  commissioner_start
  joiner_start
}

main "$@"
