#!/bin/sh
#
#  Copyright (c) 2017, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

set -e
_HERE=$(dirname "$0")
cd "${_HERE}/.."

_checkfile=`pwd`/src/agent/main.cpp
if [ ! -f $_checkfile ]
then
    echo ""
    echo "ERROR: Cannot find checkfile: ${_checkfile}"
    echo ""
    exit 1
fi

die()
{
    >&2 echo ' *** ERROR: ' $*
    exit 1
}

have()
{
    # This function checks if a tool is available
    #

    which "$1" > /dev/null 2> /dev/null
}

have_or_die()
{
    # This function verifies a tool is available and dies with proper
    # information if not available.
    #

    have "$1" || die "$1 not available!"
}

with()
{
    # This function verifies a flag is on.
    #
    # NOTE environment settings takes higher priority than default files.
    #

    VALUE=$(printenv "$1")
    if test -z "$VALUE"; then
        eval VALUE="\$$1"
    fi

    test "$VALUE" = 1
}

without()
{
    # This function verifies a flag is off.
    #
    # NOTE environment settings takes higher priority than default files.
    #

    ! with "$1"
}

# Platform information is needed to load hooks and default settings.
#
#----
# BeagleBone Black debian distribution does not support "lsb_release"
if [ -f /sys/firmware/devicetree/base/model ]
then
    # Note: 'model' is a binary file with no newline
    cat /sys/firmware/devicetree/base/model | grep -s "BeagleBone Black" && PLATFORM=beagleboneblack
fi

if test -z "$PLATFORM"; then
    have_or_die lsb_release
    PLATFORM=$(lsb_release -i | cut -c17- | tr '[:upper:]' '[:lower:]')
fi
echo "Current platform is $PLATFORM"

if test -f examples/platforms/$PLATFORM/default; then
    . examples/platforms/$PLATFORM/default
fi

STAGE_DIR=$(pwd)/._stage
BUILD_DIR=$(pwd)/._build

[ -d $STAGE_DIR ] || mkdir -v -p $STAGE_DIR
[ -d $BUILD_DIR ] || mkdir -v -p $BUILD_DIR

export PATH=$STAGE_DIR/usr/bin:$STAGE_DIR/usr/sbin:$PATH

TASKNAME=$(basename $0)
BEFORE_HOOK=examples/platforms/$PLATFORM/before_$TASKNAME
AFTER_HOOK=examples/platforms/$PLATFORM/after_$TASKNAME
if test ! -f $BEFORE_HOOK; then
    BEFORE_HOOK=/dev/null
fi
if test ! -f $AFTER_HOOK; then
    AFTER_HOOK=/dev/null
fi
